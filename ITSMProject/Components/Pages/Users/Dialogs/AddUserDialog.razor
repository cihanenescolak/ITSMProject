@using System.ComponentModel.DataAnnotations
@using ITSMProject.Data
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add New User</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="@_model">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.UserName" 
                                Label="Username" 
                                Required="true"
                                RequiredError="Username is required!"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.Email" 
                                Label="Email" 
                                Required="true"
                                RequiredError="Email is required!"
                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.FirstName" 
                                Label="First Name" 
                                Required="true"
                                RequiredError="First name is required!"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.LastName" 
                                Label="Last Name" 
                                Required="true"
                                RequiredError="Last name is required!"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.Password" 
                                Label="Password" 
                                Required="true"
                                RequiredError="Password is required!"
                                InputType="InputType.Password"
                                HelperText="Password must be at least 6 characters and contain uppercase, lowercase, number and special character"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" 
                                @bind-Value="_model.ConfirmPassword" 
                                Label="Confirm Password" 
                                Required="true"
                                RequiredError="Password confirmation is required!"
                                InputType="InputType.Password"/>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Add User</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;

    private MudForm _form = null!;
    private readonly UserModel _model = new();

    private async Task Submit()
    {
        await _form.Validate();
        // Manual check for password match (since Compare attribute causes error)
        if (_model.Password != _model.ConfirmPassword)
        {
            Snackbar.Add("Passwords don't match", Severity.Error);
            return;
        }

        if (_form.IsValid)
        {
            var user = new ApplicationUser
            {
                UserName = _model.UserName,
                Email = _model.Email,
                FirstName = _model.FirstName,
                LastName = _model.LastName,
                EmailConfirmed = true
                // Don't try to set Password property - it's handled by UserManager
            };

            // UserManager handles password hashing and storage separately
            var result = await UserManager.CreateAsync(user, _model.Password);

            if (result.Succeeded)
            {
                Snackbar.Add("User created successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(user));
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    Snackbar.Add(error.Description, Severity.Error);
                }
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private class UserModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password confirmation is required")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
